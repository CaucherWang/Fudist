<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="178" onload="init(evt)" viewBox="0 0 1200 178" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, svg;
	function init(evt) { 
		details = document.getElementById("details").firstChild; 
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(info) { details.nodeValue = "Function: " + info; }
	function c() { details.nodeValue = ' '; }

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;
		
		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}
		
		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;
		
		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) { 
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}
		
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) { 
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;
		
		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;
		
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";
		
		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";
		
		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}	

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++){
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			var searchbtn = document.getElementById("search");
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		for (var i=0; i < el.length; i++){
			var e = el[i];
			if (e.attributes["class"].value == "func_g") {
				// Scrape the function name from the onmouseover
				// callback text. This is a little dirty.
				var func = e.attributes["onmouseover"].value;
				if (func != null) {
					func = func.substr(3);
					func = func.replace(/ .*/, "");
					var r = find_child(e, "rect");
					if (r == null) {
						// the rect might be wrapped in an anchor
						// if nameattr href is being used
						if (r = find_child(e, "a")) {
						    r = find_child(r, "rect");
						}
					}
				}
				if (func != null && r != null &&
				    func.match(re)) {
					orig_save(r, "fill");
					r.attributes["fill"].value =
					    "rgb(230,0,230)";
					searching = 1;
				}
			}
		}
		if (searching) {
			var searchbtn = document.getElementById("search");
			searchbtn.style["opacity"] = "1.0";
			searchbtn.firstChild.nodeValue = "Reset Search"
		}
	}
	function searchover(e) {
		var searchbtn = document.getElementById("search");
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		var searchbtn = document.getElementById("search");
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="178.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="161" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<g class="func_g" onmouseover="s('main(00000000004056d0) (21,340 samples, 100.00%)')" onmouseout="c()" onclick="zoom(this)">
<title>main(00000000004056d0) (21,340 samples, 100.00%)</title><rect x="10.0" y="65" width="1180.0" height="15.0" fill="rgb(245,147,1)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="75.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >main(00000000004056d0)</text>
</g>
<g class="func_g" onmouseover="s('void std::__adjust_heap(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(hnswlib::HierarchicalNSW(float)::CompareByFirst) )(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(hnswlib::HierarchicalNSW(float)::CompareByFirst)) (59 samples, 0.28%)')" onmouseout="c()" onclick="zoom(this)">
<title>void std::__adjust_heap(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(hnswlib::HierarchicalNSW(float)::CompareByFirst) )(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(hnswlib::HierarchicalNSW(float)::CompareByFirst)) (59 samples, 0.28%)</title><rect x="1178.7" y="33" width="3.3" height="15.0" fill="rgb(213,181,9)" rx="2" ry="2" />
<text text-anchor="" x="1181.72" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s('void std::__adjust_heap(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) ) )(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) )) (55 samples, 0.26%)')" onmouseout="c()" onclick="zoom(this)">
<title>void std::__adjust_heap(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) ) )(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) )) (55 samples, 0.26%)</title><rect x="1187.0" y="49" width="3.0" height="15.0" fill="rgb(251,93,26)" rx="2" ry="2" />
<text text-anchor="" x="1189.96" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s('__libc_start_main(0000000000020750) (21,340 samples, 100.00%)')" onmouseout="c()" onclick="zoom(this)">
<title>__libc_start_main(0000000000020750) (21,340 samples, 100.00%)</title><rect x="10.0" y="81" width="1180.0" height="15.0" fill="rgb(242,102,37)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="91.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >__libc_start_main(0000000000020750)</text>
</g>
<g class="func_g" onmouseover="s('hnswlib::L2Sqr(void const*, void const*, void const*)(0000000000408530) (1,003 samples, 4.70%)')" onmouseout="c()" onclick="zoom(this)">
<title>hnswlib::L2Sqr(void const*, void const*, void const*)(0000000000408530) (1,003 samples, 4.70%)</title><rect x="1123.2" y="33" width="55.5" height="15.0" fill="rgb(217,217,2)" rx="2" ry="2" />
<text text-anchor="" x="1126.20" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >hnswl..</text>
</g>
<g class="func_g" onmouseover="s('_start(0000000000408450) (21,340 samples, 100.00%)')" onmouseout="c()" onclick="zoom(this)">
<title>_start(0000000000408450) (21,340 samples, 100.00%)</title><rect x="10.0" y="97" width="1180.0" height="15.0" fill="rgb(240,155,39)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="107.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >_start(0000000000408450)</text>
</g>
<g class="func_g" onmouseover="s('std::priority_queue(std::pair(float, unsigned int), std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ), std::less(std::pair(float, unsigned int) ) ) hnswlib::HierarchicalNSW(float)::searchBaseLayerSVD(false, true)(unsigned int, void const*, unsigned long) const (21,117 samples, 98.96%)')" onmouseout="c()" onclick="zoom(this)">
<title>std::priority_queue(std::pair(float, unsigned int), std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ), std::less(std::pair(float, unsigned int) ) ) hnswlib::HierarchicalNSW(float)::searchBaseLayerSVD(false, true)(unsigned int, void const*, unsigned long) const (21,117 samples, 98.96%)</title><rect x="19.3" y="49" width="1167.7" height="15.0" fill="rgb(246,171,4)" rx="2" ry="2" />
<text text-anchor="" x="22.29" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::priority_queue(std::pair(float, unsigned int), std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ), std::less(std::..</text>
</g>
<g class="func_g" onmouseover="s('all (21,340 samples, 100%)')" onmouseout="c()" onclick="zoom(this)">
<title>all (21,340 samples, 100%)</title><rect x="10.0" y="129" width="1180.0" height="15.0" fill="rgb(232,135,5)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s('hnswlib::L2Sqr(void const*, void const*, void const*)(0000000000408530) (2 samples, 0.01%)')" onmouseout="c()" onclick="zoom(this)">
<title>hnswlib::L2Sqr(void const*, void const*, void const*)(0000000000408530) (2 samples, 0.01%)</title><rect x="19.1" y="49" width="0.1" height="15.0" fill="rgb(234,186,26)" rx="2" ry="2" />
<text text-anchor="" x="22.07" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s('0xffffffffffffffff (21,340 samples, 100.00%)')" onmouseout="c()" onclick="zoom(this)">
<title>0xffffffffffffffff (21,340 samples, 100.00%)</title><rect x="10.0" y="113" width="1180.0" height="15.0" fill="rgb(225,43,36)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="123.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >0xffffffffffffffff</text>
</g>
<g class="func_g" onmouseover="s('void std::__adjust_heap(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) ) )(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) )) (90 samples, 0.42%)')" onmouseout="c()" onclick="zoom(this)">
<title>void std::__adjust_heap(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) ) )(__gnu_cxx::__normal_iterator(std::pair(float, unsigned int)*, std::vector(std::pair(float, unsigned int), std::allocator(std::pair(float, unsigned int) ) ) ), long, long, std::pair(float, unsigned int), __gnu_cxx::__ops::_Iter_comp_iter(std::less(std::pair(float, unsigned int) ) )) (90 samples, 0.42%)</title><rect x="1182.0" y="33" width="5.0" height="15.0" fill="rgb(225,210,17)" rx="2" ry="2" />
<text text-anchor="" x="1184.98" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
