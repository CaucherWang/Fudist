import os
import numpy as np
import struct

source = './data/'
datasets = ['gist']

def read_fvecs(filename, c_contiguous=True):
    fv = np.fromfile(filename, dtype=np.float32)
    if fv.size == 0:
        return np.zeros((0, 0))
    dim = fv.view(np.int32)[0]
    assert dim > 0
    fv = fv.reshape(-1, 1 + dim)
    if not all(fv.view(np.int32)[:, 0] == dim):
        raise IOError("Non-uniform vector sizes in " + filename)
    fv = fv[:, 1:]
    if c_contiguous:
        fv = fv.copy()
    return fv

def to_fvecs(filename, data):
    print(f"Writing File - {filename}")
    with open(filename, 'wb') as fp:
        for y in data:
            d = struct.pack('I', len(y))
            fp.write(d)
            for x in y:
                a = struct.pack('f', x)
                fp.write(a)


def paa_transform(X, w):
    # X is a numpy array where each row is a time series
    # w is the number of segments
    
    n, m = X.shape
    X_paa = np.zeros((n, w))
    
    for i in range(w):
        start = int(i * m / w)
        end = int((i + 1) * m / w)
        X_paa[:, i] = np.mean(X[:, start:end], axis=1)
    
    return X_paa

def compute_mean(matrix):
    return np.mean(matrix, axis=0)

def sort_with_positions(arr):
    # create a list of tuples where the first element is the value
    # and the second element is the original position in the array
    arr_with_positions = [(val, i) for i, val in enumerate(arr)]

    # sort the list of tuples by the first element (the value)
    sorted_arr_with_positions = sorted(arr_with_positions)

    # create two separate arrays, one for the sorted values and one for the original positions
    sorted_arr = [val for val, _ in sorted_arr_with_positions]
    positions = [pos for _, pos in sorted_arr_with_positions]

    return sorted_arr, positions


if __name__ == "__main__":
    
    for dataset in datasets:
        
        # path
        path = os.path.join(source, dataset)
        data_path = os.path.join(path, f'{dataset}_base.fvecs')
        
        w = 16

        # read data vectors
        print(f"Reading {dataset} from {data_path}.")
        X = read_fvecs(data_path)
        D = X.shape[1]
        
        # Y = X[90266]
        # cand = [0.0255,0.0248,0.0252,0.0438,0.0505,0.0544,0.1172,0.1085,0.0475,0.0413,0.048,0.0546,0.0201,0.0169,0.0115,0.0505,0.0231,0.0302,0.008,0.0471,0.0522,0.0512,0.0532,0.06,0.0583,0.0509,0.0761,0.0584,0.0134,0.0116,0.01,0.0485,0.0261,0.0295,0.0036,0.0444,0.0769,0.0776,0.0229,0.0634,0.0632,0.0436,0.0637,0.0453,0.0089,0.0097,0.0089,0.058,0.026,0.0312,0.0037,0.048,0.0569,0.0909,0.0161,0.0904,0.0469,0.0432,0.072,0.0733,0.0144,0.007,0.0087,0.0995,0.0215,0.0277,0.0059,0.0581,0.0561,0.114,0.0108,0.0787,0.0716,0.0861,0.0604,0.1686,0.0268,0.0066,0.0079,0.1305,0.0227,0.02,0.0037,0.0448,0.0463,0.075,0.0231,0.0845,0.0434,0.0741,0.0601,0.0998,0.0141,0.0054,0.0086,0.0749,0.0253,0.0185,0.0058,0.0318,0.045,0.0695,0.0358,0.0838,0.0373,0.0631,0.0495,0.0436,0.0125,0.0095,0.0068,0.052,0.0291,0.0215,0.0186,0.0367,0.0588,0.0769,0.0872,0.1229,0.0536,0.0602,0.0364,0.0461,0.0158,0.0084,0.0094,0.0444,0.0275,0.0382,0.0475,0.0354,0.0546,0.113,0.182,0.067,0.0501,0.0463,0.0674,0.0601,0.0215,0.0154,0.0184,0.0652,0.036,0.0497,0.0178,0.0484,0.0619,0.0902,0.0818,0.0735,0.0301,0.0336,0.0551,0.0507,0.0158,0.0128,0.0224,0.0376,0.0507,0.0588,0.0116,0.0549,0.0565,0.1099,0.0321,0.0667,0.0318,0.0396,0.0673,0.0784,0.0152,0.0137,0.0274,0.0804,0.0348,0.0501,0.0069,0.0342,0.0572,0.1154,0.0336,0.0755,0.0499,0.0511,0.0655,0.0803,0.0178,0.0104,0.014,0.0934,0.0263,0.029,0.0082,0.025,0.0512,0.0937,0.0255,0.0601,0.0596,0.0579,0.0502,0.1224,0.0374,0.0092,0.0136,0.0882,0.0236,0.0207,0.0077,0.0533,0.0408,0.0744,0.0438,0.0837,0.0415,0.0433,0.0503,0.0629,0.027,0.0079,0.0159,0.0646,0.017,0.021,0.0141,0.0267,0.0739,0.0958,0.059,0.1108,0.0415,0.0573,0.0375,0.0716,0.0253,0.0134,0.0165,0.0677,0.0256,0.0126,0.0349,0.0511,0.076,0.0824,0.1396,0.1588,0.075,0.0549,0.063,0.0917,0.0205,0.0081,0.0187,0.0708,0.0213,0.0598,0.0323,0.0182,0.044,0.0644,0.0825,0.0511,0.0465,0.0463,0.0951,0.0681,0.0302,0.0349,0.0466,0.0386,0.0192,0.0588,0.0224,0.0183,0.0624,0.0711,0.0317,0.0232,0.051,0.0378,0.0946,0.1223,0.0262,0.0193,0.0564,0.0622,0.029,0.0316,0.0208,0.0259,0.0655,0.0905,0.0426,0.0741,0.075,0.0411,0.0908,0.1469,0.0243,0.011,0.0215,0.0374,0.0441,0.0244,0.0185,0.0445,0.0694,0.0771,0.0701,0.1058,0.0452,0.0316,0.0425,0.0963,0.0193,0.012,0.0188,0.0294,0.027,0.026,0.0252,0.0439,0.0623,0.0456,0.1054,0.1106,0.0593,0.0445,0.0434,0.0551,0.0234,0.0193,0.0121,0.0509,0.0237,0.0325,0.008,0.0473,0.0629,0.051,0.0481,0.0596,0.0782,0.0551,0.0674,0.0586,0.0166,0.0095,0.0094,0.0489,0.0256,0.0299,0.0035,0.0443,0.0871,0.0761,0.0216,0.0628,0.0829,0.0519,0.0598,0.0473,0.0112,0.0047,0.0088,0.059,0.0249,0.031,0.0037,0.0479,0.0608,0.0938,0.0148,0.0873,0.0583,0.0349,0.0577,0.0713,0.0164,0.007,0.0081,0.0992,0.0209,0.0279,0.0059,0.0581,0.0599,0.1193,0.012,0.0779,0.0727,0.0995,0.0493,0.1567,0.0292,0.0113,0.0079,0.1297,0.0228,0.0204,0.0037,0.0451,0.0518,0.0843,0.0215,0.0867,0.0496,0.1121,0.0558,0.0918,0.0142,0.0086,0.0082,0.0752,0.0251,0.0175,0.0058,0.0318,0.049,0.08,0.0347,0.0839,0.0504,0.0782,0.0447,0.0422,0.0118,0.0072,0.0064,0.0512,0.0295,0.0194,0.0185,0.0367,0.0713,0.0832,0.0795,0.1217,0.0678,0.0669,0.0308,0.0464,0.0151,0.0088,0.0097,0.0438,0.0294,0.0371,0.0468,0.0354,0.0707,0.0973,0.1562,0.0618,0.0637,0.0459,0.0558,0.0579,0.0345,0.0245,0.0204,0.0659,0.0357,0.0508,0.0176,0.0485,0.0692,0.0908,0.0711,0.0715,0.0506,0.0372,0.0514,0.0501,0.024,0.0162,0.0198,0.0369,0.0497,0.0582,0.0114,0.0546,0.0641,0.1034,0.0345,0.0692,0.0636,0.0202,0.0825,0.0876,0.0207,0.0063,0.0268,0.081,0.0324,0.0515,0.0073,0.034,0.0586,0.1073,0.0351,0.0771,0.0596,0.0213,0.0791,0.0826,0.0176,0.0104,0.0157,0.0911,0.0249,0.0331,0.0086,0.0253,0.0529,0.0963,0.0314,0.0604,0.0554,0.0707,0.0692,0.1268,0.0337,0.0171,0.0174,0.0888,0.0251,0.0245,0.0073,0.054,0.0511,0.0828,0.0485,0.088,0.0443,0.0716,0.069,0.0618,0.0329,0.0124,0.0174,0.0659,0.0169,0.0211,0.0136,0.027,0.0805,0.0947,0.0616,0.1184,0.0572,0.0811,0.0365,0.0693,0.0263,0.0105,0.0135,0.0671,0.0265,0.0107,0.0354,0.0508,0.0991,0.0746,0.122,0.1539,0.0966,0.0714,0.042,0.0876,0.0274,0.0134,0.0184,0.0698,0.0252,0.0599,0.0349,0.0193,0.0783,0.0696,0.064,0.0482,0.0962,0.0647,0.0647,0.0706,0.0536,0.049,0.0411,0.0409,0.021,0.0582,0.022,0.0193,0.0813,0.0682,0.0269,0.0232,0.1175,0.0493,0.0957,0.1296,0.0497,0.0193,0.0551,0.0699,0.0291,0.0321,0.0211,0.026,0.0763,0.0987,0.0449,0.0784,0.1078,0.0385,0.0829,0.1609,0.0259,0.0102,0.0236,0.0413,0.0444,0.0242,0.0189,0.0461,0.0936,0.0739,0.0717,0.1081,0.0711,0.0505,0.03,0.1037,0.023,0.0294,0.012,0.0312,0.0287,0.0274,0.025,0.044,0.0764,0.0424,0.0957,0.1174,0.1016,0.0647,0.0405,0.0586,0.0211,0.0195,0.0123,0.0505,0.0256,0.0338,0.0081,0.0474,0.0743,0.0518,0.045,0.0624,0.1198,0.0614,0.0638,0.0598,0.0156,0.0109,0.0092,0.0486,0.0271,0.032,0.0037,0.0443,0.1033,0.0773,0.0217,0.064,0.1102,0.0505,0.0591,0.0497,0.0184,0.0101,0.0092,0.0586,0.0265,0.0322,0.0037,0.0477,0.0742,0.0925,0.0142,0.0845,0.1042,0.0602,0.0565,0.0739,0.0258,0.0154,0.0084,0.0982,0.0214,0.0282,0.0057,0.058,0.0607,0.1206,0.0121,0.0763,0.1001,0.1046,0.0449,0.1459,0.0312,0.0146,0.0082,0.1314,0.0233,0.0215,0.0038,0.0453,0.0602,0.0818,0.0223,0.0871,0.065,0.1224,0.0544,0.0822,0.0225,0.0142,0.0078,0.0761,0.0256,0.0175,0.0057,0.0317,0.0666,0.0822,0.0336,0.085,0.0924,0.0901,0.0416,0.0382,0.0163,0.0107,0.0062,0.0501,0.0304,0.0193,0.0189,0.0368,0.0873,0.0824,0.0743,0.1249,0.1126,0.0689,0.0296,0.0457,0.0161,0.0105,0.0097,0.0442,0.0318,0.0376,0.0457,0.0352,0.0989,0.0913,0.1337,0.0588,0.1104,0.0603,0.0468,0.0581,0.0351,0.0269,0.0206,0.0634,0.0381,0.0532,0.018,0.0488,0.0804,0.0973,0.0633,0.0759,0.0745,0.0523,0.0486,0.0521,0.0298,0.0167,0.0181,0.0357,0.051,0.0598,0.0109,0.054,0.0835,0.1036,0.0365,0.0752,0.1249,0.0329,0.0915,0.0942,0.0356,0.0088,0.0278,0.0807,0.0341,0.0532,0.0072,0.0338,0.0772,0.1027,0.0363,0.0797,0.1499,0.0642,0.0918,0.0852,0.0336,0.0158,0.0177,0.0873,0.027,0.0348,0.009,0.0255,0.0742,0.1147,0.0362,0.0612,0.1166,0.1252,0.0851,0.1322,0.0424,0.0242,0.0205,0.0914,0.0255,0.0251,0.0078,0.0544,0.0519,0.074,0.0523,0.0908,0.0593,0.0997,0.0844,0.0627,0.0441,0.018,0.0193,0.0679,0.0185,0.0222,0.0136,0.0273,0.1088,0.1023,0.0617,0.1247,0.0998,0.1124,0.0379,0.0657,0.035,0.0192,0.0128,0.0638,0.0294,0.0114,0.0361,0.0507,0.1401,0.0699,0.1105,0.1555,0.159,0.0815,0.0347,0.0889,0.0389,0.0201,0.0186,0.0695,0.03,0.0617,0.0371,0.0207,0.1016,0.0696,0.057,0.0421,0.113,0.0597,0.0483,0.0668,0.0618,0.0532,0.0375,0.04,0.0235,0.0609,0.022,0.0199,0.1037,0.0718,0.0293,0.0244,0.1444,0.0439,0.0933,0.1338,0.0554,0.0197,0.0528,0.0744,0.0298,0.0336,0.0215,0.026,0.0741,0.0967,0.0465,0.0807,0.1282,0.0337,0.086,0.1693,0.0274,0.0118,0.0252,0.044,0.0462,0.0254,0.0187,0.0473,0.1065,0.0718,0.0711,0.1061,0.075,0.0512,0.0344,0.1014,0.0276,0.0377,0.0131,0.031]
        # for i in range(960):
        #     if abs(cand[i] - Y[i]) > 1e-8:
        #         print(i, cand[i])
        # print('totally same')
        
        # means = compute_mean(X)
        
        # sorted_means, positions = sort_with_positions(means)
        # sorted_arr = sorted(means)

        # # initialize an array to store the new positions
        # positions = [0] * len(means)
    

        # # record the new positions for each element
        # for i, val in enumerate(sorted_arr):
        #     index = means.index(val)  # get the index of the value in the original array
        #     positions[index] = i
            
        # print(positions)
        # Y = X[:, positions]

        # generate random orthogonal matrix, store it and apply it
        print(f"PAA {dataset} of dimensionality {D}.")
        PAA = paa_transform(X, w)

        transformed_path = os.path.join(path, f'PAA_{w}_{dataset}_base.fvecs')

        to_fvecs(transformed_path, PAA)
